#!/usr/bin/env zsh

####################################################################################
###                                                                              ###
###                          NSFV check utility                                  ###
###                                                                              ###
###                             just for fun                                     ###
###                                                                              ###
####################################################################################

# ---------- СТРОГИЙ РЕЖИМ ----------
# setopt -euo pipefail

# --------------------------------- ПЕРЕМЕННЫЕ -------------------------------------
KEY=`cat ~/.config/ncheck.key`
WORKDIR=$PWD
INVERT=false
VERBOSE=false
PERMISSIVE=false
VERBOSE=":"
LONG=false
ACTION=print

declare FACTOR # Является ли картинка NSFW или нет. Принимает значение true и false. Должна быть глобальной
declare SCORE  # Насколько картинка "плохая". Приходит float значение от сервиса. Должна быть глобальной

# ---------- ФУНКЦИИ ----------

# Функция отправляет один файл сервису, получает JSON, забирает из него 2 значения
function scan {
  CURRENT_RESULT=`curl -s --request POST --url https://nsfw-images-detection-and-classification.p.rapidapi.com/adult-content-file \
    --header "X-RapidAPI-Host: nsfw-images-detection-and-classification.p.rapidapi.com"  \
    --header "X-RapidAPI-Key: $KEY" \
    -F "image=@$FILENAME"`

  # TODO: Добавить проверку кода выхода curl, если он не отработал, выйти с кодом 1

  FACTOR=`echo $CURRENT_RESULT | jq '.unsafe'`
  SCORE=`echo $CURRENT_RESULT | jq '.objects[0].score'`
  
  $VERBOSE FACTOR $FACTOR, SCORE $SCORE, FILENAME $FILENAME

  return 0
}

# Копирование файлов
# TODO: проверить что происходит если INVERT = true
function copy {
  for FILENAME in `find $WORKDIR -maxdepth 1 -type f -exec file {} \; | grep -i 'image' | cut -d: -f1` ; do
    scan $FILENAME
    if [ $FACTOR = true ] && [ $INVERT = false ] ; then cp $FILENAME $DESTDIR ; fi
  done
}

# Перемещение файлов
# TODO: проверить что происходит если INVERT = true
function move {
  for FILENAME in `find $WORKDIR -maxdepth 1 -type f -exec file {} \; | grep -i 'image' | cut -d: -f1` ; do
    scan $FILENAME
    if [ $FACTOR = true ] && [ $INVERT = false ] ; then mv $FILENAME $DESTDIR ; fi
  done
}

function print {
  for FILENAME in `find $WORKDIR -maxdepth 1 -type f -exec file {} \; | grep -i 'image' | cut -d: -f1` ; do
    scan

    # Вывод файлов в обычном режиме
    if [ $FACTOR = true ] && [ $INVERT = false ] ; then
      if [ $LONG = true ] ; then
        echo $SCORE `realpath $FILENAME` # -l задана, поэтому добираем имя файла до полного
      else
        echo ${FILENAME##*/} # -l не задана, значит, наоборот, выводим имя файла без пути
      fi
    
    # Вывод файлов в инвертированном режиме
    elif [ $FACTOR = false ] && [ $INVERT = true ] ; then
      if [ $LONG = true ] ; then
        echo `realpath $FILENAME` "0.00"
      else
        echo ${FILENAME##*/}
      fi
    fi
  done
}

function usage {
    echo "Usage:"
    echo "  ncheck [ { -c | -m } DESTINATION ] [ -i ] [ -k ] [ -l ] [ -p ] [ -R ] [ -v ] [ DIRECTORY ]\n"
    echo "Description:"
    echo "No arguments   : Just print filenames, like 'ls' does, but the utility will only show names of files with NSFW content"
    echo "If DIRECTORY is given, then perform check in it.\n"    
    echo "-c DESTINATION : Copy files into DESTINATION. Incompatible with -R and -m."
    echo "-i             : Invert the results. Show files without NSFW content."    
    echo "-k             : Reserved"
    echo "-l             : Long, informative output. Print "score" of the content."
    echo "-m DESTINATION : Move files into the DESTINATION directory"
    echo "-p             : Permissive mode. Allow 16+ erotic content. Use with caution."
    echo "-R             : Remove files. No additional confirmations will be asked. Use with caution. Incompatible with -m and -c."
    echo "-r             : Scan recursively. By default the utility only perform checks in current directory"
    echo "-u or -h       : Print this text, then exit"
    echo "-v             : Print version and exit" 
    echo "Examples:\n"
    echo ""
    echo "ncheck"
    exit -1
}

version() {
  echo "nCheck v. 0.1"
  exit -1
}

# ------------------- РАЗБОР АРГУМЕНТОВ И РАЗЛИЧНЫЕ ПРОВЕРКИ ----------------------

# Решил пренебречь наличием длинных опций типа --copy-to в пользу упрощения скрипта.
# Испольную встроенную команду getopts вместо внешней утилиты GNU getopt
# На самом деле, с помощью getopts можно и в длинные аргументы, но это путь
#                          на тёмную сторону

while getopts c:ihklm:pRruVv OPTION
do
   case $OPTION in
               c ) [ $ACTION = print ] && { ACTION=copy ; DESTDIR=${OPTARG} ; } || { echo "Wrong arguments" ; exit 1 ; } ;;
           h | u ) usage ;;
               i ) INVERT=true ;;
               l ) LONG=true ;;
               m ) [ $ACTION = print ] && { ACTION=move ; DESTDIR=${OPTARG} ; } || { echo "Wrong arguments" ; exit 1 ; } ;;
               p ) PERMISSIVE=true ;;
               R ) echo "Notice: option -R is under development now" ;;
               V ) version ;;
               v ) VERBOSE=echo ;;
               * ) echo "Invalid option: $option" >&2 && exit 1 ;;
   esac
done

# Остались 2 финальные проверки, которые нужны исключительно для нормальной поддержки синтаксиса вида
#     ncheck -c куда_копировать исходная_директория 
#     ncheck -m куда_перемещать исходная_директория
#     ncheck -c куда_перемещать

if [ -d $argv[-1] ] && [ $ACTION = print ] ; then WORKDIR=$argv[-1] ; fi

# Возможен случай, когда включено -m или -c, но тогда предпоследним аргументом тоже должна быть директория
if [ -d $argv[-1] ] && ( [ $ACTION = copy ] || [ $ACTION = move ] ) && [ -d $argv[-2] ] ; then WORKDIR=$argv[-1] ; fi

# Ради чего всё затевалось
function main {
  case $ACTION in
    print ) print ;;
     copy ) copy ;;
     move ) move ;;
  esac

  return 0
}

main

